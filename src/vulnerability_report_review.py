# vulnerability_report_review.py (FINAL ENHANCED VERSION WITH COLOR FIX)
import streamlit as st
import json
import pandas as pd
import os
import time
from datetime import datetime
import hashlib

# --- CONFIGURATION ---
VULNERABILITY_REPORT_PATH = "vulnerability_report.json"
UPDATE_INTERVAL_SECONDS = 5
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD_HASH = hashlib.sha256("admin".encode()).hexdigest()

# --- PAGE SETUP & STYLING ---
st.set_page_config(page_title="Vigilance Dashboard", page_icon="üõ°Ô∏è", layout="wide")
st.markdown("""
<style>
    /* Headers */
    .main-header { font-size: 2.5rem; font-weight: bold; text-align: center; }
    .sub-header { font-size: 1.5rem; text-align: center; color: #888; margin-bottom: 2rem; }

    /* Status Banner */
    .status-banner { padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; text-align: center; font-size: 1.5rem; font-weight: bold; }
    .status-safe { background-color: #28a745; color: white; }
    .status-warning { background-color: #ffc107; color: #333; }
    .status-danger { background-color: #dc3545; color: white; }

    /* Device Cards */
    .device-card { padding: 1rem; border-radius: 8px; margin-bottom: 0.5rem; box-shadow: 0 2px 4px rgba(0,0,0,0.05); border-left: 5px solid; }
    .device-accepted { background-color: #e8f5e9; border-color: #4CAF50; color: #1b5e20; }
    .device-rejected { background-color: #ffebee; border-color: #f44336; color: #b71c1c; }

    /* Login */
    .login-container { max-width: 400px; margin: 80px auto; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    .login-header { text-align: center; font-size: 2rem; font-weight: bold; }
</style>
""", unsafe_allow_html=True)


# --- AUTHENTICATION ---
def check_password():
    if st.session_state.get("authenticated", False): return True

    def password_entered():
        if "username" in st.session_state and "password" in st.session_state:
            user, pwd_hash = st.session_state["username"], hashlib.sha256(
                st.session_state["password"].encode()).hexdigest()
            if user == ADMIN_USERNAME and pwd_hash == ADMIN_PASSWORD_HASH:
                st.session_state["authenticated"] = True
                if "password" in st.session_state: del st.session_state["password"]
            else:
                st.session_state["authenticated"] = False

    with st.container():
        st.markdown('<div class="login-container">', unsafe_allow_html=True)
        st.markdown('<p class="login-header">üõ°Ô∏è Vigilance Login</p>', unsafe_allow_html=True)
        st.text_input("Username", key="username", on_change=password_entered)
        st.text_input("Password", type="password", key="password", on_change=password_entered)
        if "authenticated" in st.session_state and not st.session_state["authenticated"]:
            st.error("Invalid username or password.")
        st.markdown('</div>', unsafe_allow_html=True)
    return False


# --- UI DISPLAY FUNCTIONS ---
def display_defense_status(report):
    st.subheader("üõ°Ô∏è Defense System Status")
    mode, quarantined, parole = report.get('defense_mode', 'Normal'), report.get('quarantined_devices', []), report.get(
        'on_parole_devices', [])
    col1, col2, col3 = st.columns(3)
    col1.metric("Defense Mode", mode, delta=mode, delta_color="inverse" if mode == 'High-Alert' else "off")
    col2.metric("üõë Quarantined Devices", len(quarantined))
    col3.metric("‚ö†Ô∏è On-Parole Devices", len(parole))

    if quarantined: st.expander("View Quarantined Devices").error(", ".join(quarantined) or "None")
    if parole: st.expander("View On-Parole Devices").warning(", ".join(parole) or "None")


def display_device_cards(device_reports):
    st.subheader("Device Contribution (Last Round)")
    if not device_reports: st.info("Waiting for device reports..."); return
    for device in device_reports:
        status, device_id = device.get('status', 'unknown'), device.get('device_id', 'N/A')
        if status == 'accepted':
            st.markdown(f'<div class="device-card device-accepted"><b>‚úÖ {device_id}</b>: Accepted</div>',
                        unsafe_allow_html=True)
        else:
            st.markdown(
                f'<div class="device-card device-rejected"><b>üõë {device_id}</b>: {status.replace("_", " ").title()}</div>',
                unsafe_allow_html=True)


# --- MAIN APP ---
def main():
    if not check_password(): st.stop()

    st.markdown('<p class="main-header">üõ°Ô∏è Vigilance Dashboard</p>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Real-time Smart City Security Monitoring</p>', unsafe_allow_html=True)

    with st.sidebar:
        auto_refresh = st.toggle("üîÑ Auto-Refresh", value=True,
                                 help="Automatically refresh the dashboard every 5 seconds.")
        if st.button("Manual Refresh", use_container_width=True): st.rerun()
        st.divider()
        if st.button("üö™ Logout", use_container_width=True, type="primary"):
            st.session_state["authenticated"] = False
            st.rerun()

    placeholder = st.empty()
    while True:
        try:
            report = json.load(open(VULNERABILITY_REPORT_PATH)) if os.path.exists(VULNERABILITY_REPORT_PATH) else None
        except (json.JSONDecodeError, IOError):
            report = None

        with placeholder.container():
            if not report:
                st.warning("Waiting for the first vulnerability report from the server...")
            else:
                display_defense_status(report)
                st.divider()

                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Global Accuracy", f"{report.get('global_accuracy', 0.0):.2%}")
                with col2:
                    st.metric("Round Divergence", f"{report.get('divergence_score', 0.0):.4f}")

                st.divider()
                display_device_cards(report.get('device_reports', []))

        if not auto_refresh: break
        time.sleep(UPDATE_INTERVAL_SECONDS)
        st.rerun()


if __name__ == "__main__":
    main()